import SwiftUI

struct AboutDotDashView: View {
    
    var body: some View {
        ScrollView {
            VStack{
                Image("DotDash-cover")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 600, height: 100)
            }
            .padding(20)
            VStack {
                Text("")
                Text("""
                    The DotDash app is a collection of features related to Morse code. The app has a Neumorphic and intuitive user interface that allows users to easily navigate and explore its various functionalities.
                    
                    The app contains several sections, each with its own set of features. 
                    """)
                .modifier(TextModifer())
            }
            .padding(20)
            VStack {
                Text("Welcome üåª")
                    .modifier(TitleModifer())
                Text("")
                Text("""
                The "Welcome" section contains two navigation links that take the user to their respective pages. The "Guide to Morse" link takes the user to a guide on Morse Code. The "About DotDash" link takes the user to this page that provides information about the app.
                """)
                .modifier(TextModifer())
            }
            .modifier(NeumorphicStyleModifier())
            .padding(20)
            VStack {
                Text("Features üçÄ")
                    .modifier(TitleModifer())
                Text("""
                The "Features" section contains three navigation links that provide access to the app's core functionalities.
                """)
                .modifier(TextModifer())
                VStack{
                    Text("1. Live Transcribe")
                        .foregroundColor(.gray)
                        .font(.title)
                        .underline()
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                    Image("info1")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 600, height: 100)
                    Text("""
                a. The first button acts as a Telegraph Key device, where the user can either tap or long press to input morse code, or wait for 3 seconds for it to register a space between two letters. The button also emits a short, or long "beep" sound based on the kind of tap gesture made by the user.
                The input by the user is shown in real-time next to 'Morse Input', the text is also processed live using the decodedMessage() function where the algorithm decrypts the morse input to readable message and displays next to 'Decoded Message'.
                
                b. This is a Delete button, that deletes the last character from the user input
                
                c. This is a Clear button, that lets user clear the entire Morse Input. 
                """)
                    .modifier(TextModifer())
                }
                VStack {
                    Text("2. Encrypt")
                        .foregroundColor(.gray)
                        .font(.title)
                        .underline()
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                    Image("info3")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 600, height: 100)
                    Text("""
                The 'Encrypt' button animates in 3 parts: when it's tapped, when it's doing the task, and when the task is done. It takes the text entered by user and converts it into morse code.
                """)
                    .modifier(TextModifer())
                    Image("info2")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 600, height: 100)
                    Text("""
                a. The Copy button lets user copy the morse code that was generated by converting the input provided by the user.
                
                b. The Listen button lets you listen to the output of morse code in radio-based morse code (short and long beeps) to convey dots and dashes.
                """)
                    .modifier(TextModifer())
                }
                VStack{
                    Text("3. Decrypt")
                        .foregroundColor(.gray)
                        .font(.title)
                        .underline()
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                    Image("info4")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 600, height: 100)
                    Text("""
                The 'Decrypt' button animates just like the Encrypt button and decodes the morse input provided in text form in the TextField to readable text string.
                """)
                    .modifier(TextModifer())
                    Image("info5")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 600, height: 100)
                    Text("""
                The Next button takes the user to the 'Future Prospects' View.
                """)
                    .modifier(TextModifer())
                }
                
            }
            .modifier(NeumorphicStyleModifier())
            .padding(20)
            VStack {
                Text("Notes ‚ù§Ô∏è")
                    .modifier(TitleModifer())
                Text("")
                Text("""
                Finally, the "Notes" section contains two navigation links that provide additional information about the app and its developer (hi üëã ). The "Future Prospects" link takes the user to a page that discusses potential future features, while the "About Me" link takes them to a page that provides information about me - the app's developer.
                """)
                .modifier(TextModifer())
            }
            .modifier(NeumorphicStyleModifier())
            .padding(20)
            Text("")
        }
        .modifier(NavigationModifier())
    }
}
